## MISC
# size of the margins with pan-follows-cursor
pan_follows_cursor_margin=50
# whether pan-follows-cursor should pan when the entire image is visible
pan_follows_cursor_move_if_full_view=no

## STATUS LINE
# whether to show a status line
status_line_enabled=yes
# its position, possible values: (bottom|top)_(left|right)
status_line_position=bottom_left
# its font size
status_line_size=36
# the text to be expanded
# see property expansion: https://mpv.io/manual/master/#property-expansion
# \N can be used for line breaks
# you can also use ass tags, see here: http://docs.aegisub.org/3.2/ASS_Tags/
status_line=${filename} [${playlist-pos-1}/${playlist-count}]

## MINIMAP
# whether to show a minimap
minimap_enabled=yes
# the position of the center of the minimap, in percentage of the window (x, y)
minimap_center=92,92
# the scale of the minimap (i.e. the view rectangle is scale / 100 times the size of the window)
minimap_scale=12
# the cutoff size of the minimap (i.e. the image rectangle is clipped if it falls outside of the this zone)
minimap_max_size=16,16
# opacity of the "image" (from 00=opaque to FF=transparent)
minimap_image_opacity=88
# color of the "image" (#BBGGRR where each component rages from 00 to FF)
minimap_image_color=BBBBBB
# opacity of the "view"
minimap_view_opacity=BB
minimap_view_color=222222
# whether the view should be drawn above the image
minimap_view_above_image=yes
# whether to show the minimap if the current image is fully visible
minimap_hide_when_full_image_in_view=yes

## RULER
# whether to show the length of the lines between the two points
ruler_show_distance=yes
# whether to show the coordinates of the two points
ruler_show_coordinates=yes
# the coordinate space of the text shown. Can be "image", "window", "both"
ruler_coordinates_space=image
# can be "degrees", "radians", "both", or "no"
ruler_show_angles=degrees
ruler_line_width=2
ruler_dots_radius=3
ruler_font_size=36
# ranges from 00 (black) to FF (white)
ruler_line_color=33
# bindings used to set points. The binding to trigger ruler mode can also be used. Comma-separated list
ruler_confirm_bindings=MBTN_LEFT,ENTER
# bindings used to set points. The binding to trigger ruler mode can also be used. Comma-separated list
ruler_exit_bindings=ESC
# if yes, the first point will be immediately set at the cursor position when calling 'ruler'
ruler_set_first_point_on_begin=no
# if yes, the ruler overlay will be immediately cleared when setting the second point
ruler_clear_on_second_point_set=no

## HOOKS
# commands to execute when a file detected as an image (1 frame, no audio) is loaded or unloaded
# an image was loaded, and the previous file was not an image (or there was no previous file)
command_on_first_image_loaded=
# an image was loaded (regardless of what the previous file was) 
command_on_image_loaded=
# a non-image was loaded, and the previous file was an image
command_on_non_image_loaded=
# the purpose of these "hooks" is to let you change bindings, profiles, reset properties...
# see https://mpv.io/manual/master/#list-of-input-commands for general command information
# note that there is no such thing as "unloading a profile", to emulate this you must create an opposite profile and load that
# example possible values:
#command_on_first_image_loaded=apply-profile image; enable-section image-viewer; script-message enable-status-line
#command_on_image_loaded=no-osd set video-pan-x 0; script-message align-border "" -1
#command_on_non_image_loaded=disable-section image-viewer; no-osd set video-pan-x 0; no-osd set video-pan-y 0; no-osd set video-zoom 0; script-message disable-status-line
